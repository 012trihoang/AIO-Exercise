import math
import random

def MAE(y, y_hat):
    return abs(y - y_hat)

def MSE(y, y_hat):
    return (y - y_hat)**2

def RMSE(y, y_hat):
    return math.sqrt(MSE(y, y_hat))

def compute_loss():
    num_samples = input('Input number of samples (integer number) which are generated:')

    if (not num_samples.isnumeric()):
        print('Number of samples must be an integer number')
        return

    num_samples = int(num_samples)

    y = [random.uniform(0, 10) for _ in range(num_samples)]
    y_hat = [random.uniform(0, 10) for _ in range(num_samples)]

    loss_name = input('Input loss name:')

    LOSS_FUNCTION_NAMES = ['MAE', 'MSE', 'RMSE']
    if loss_name in LOSS_FUNCTION_NAMES:
        sum_loss = 0
        for i in range(num_samples):
            output_str = f"loss name: {loss_name}, "
            y_i = y[i]
            y_hat_i = y_hat[i]

            if loss_name == 'MAE':
                loss = MAE(y_i, y_hat_i)
            elif loss_name == 'MSE':
                loss = MSE(y_i, y_hat_i)
            elif loss_name == 'RMSE':
                loss = RMSE(y_i, y_hat_i)

            output_str += f'sample: {i}, pred: {y_i}, y_hat: {y_hat_i}, loss: {loss}'
            print(output_str)

            sum_loss += loss

        final_loss = sum_loss / num_samples
        print(f"final {loss_name}: {final_loss}")
    else:
        print('Not supported')

compute_loss()