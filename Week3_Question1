import torch 
import torch.nn as nn

class Softmax(nn.Module):
    def __init__(self):
        super().__init__()

    def forward(self, x):
        x_exp = torch.exp(x)
        total = x_exp.sum(0, keepdims=True)
        return x_exp / total

class softmax_stable(nn.Module):
    def __init__(self):
        super().__init__()

    def forward(self, x):
        x_max = torch.max(x, dim=0, keepdims=True)
        x_exp = torch.exp(x - x_max.values)
        total = x_exp.sum(0, keepdims=True)
        return x_exp / total

data = torch.Tensor ([1 , 2 , 3])
softmax = Softmax ()
output = softmax ( data )
print(output)

data1 = torch.Tensor([1, 2, 3])
softmax_stable = softmax_stable()
output = softmax_stable(data1)
print(output)